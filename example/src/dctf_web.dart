import 'package:serpro_integra_contador_api/serpro_integra_contador_api.dart';

Future<void> DctfWeb(ApiClient apiClient) async {
  print('=== Exemplos DCTFWeb ===');

  final dctfWebService = DctfWebService(apiClient);

  try {
    // 1. M√©todos de conveni√™ncia
    try {
      print('\n--- 1. M√©todos de conveni√™ncia ---');
      // DARF Geral Mensal
      final darfGeralResponse = await dctfWebService.gerarDarfGeralMensal(
        contribuinteNumero: '00000000000000',
        contratanteNumero: '00000000000000',
        autorPedidoDadosNumero: '00000000000000',
        anoPA: '2027',
        mesPA: '11',
        idsSistemaOrigem: [SistemaOrigem.esocial, SistemaOrigem.mit],
      );
      print('‚úÖ DARF Geral Mensal: ${darfGeralResponse.sucesso}');
      await Future.delayed(Duration(seconds: 10));

      // DARF Pessoa F√≠sica Mensal
      final darfPfResponse = await dctfWebService.gerarDarfPfMensal(
        contribuinteNumero: '00000000000000',
        contratanteNumero: '00000000000000',
        autorPedidoDadosNumero: '00000000000000',
        anoPA: '2022',
        mesPA: '06',
      );
      print('‚úÖ DARF PF Mensal: ${darfPfResponse.sucesso}');
      await Future.delayed(Duration(seconds: 10));

      // DARF 13¬∫ Sal√°rio
      final darf13Response = await dctfWebService.gerarDarf13Salario(
        contribuinteNumero: '00000000000000',
        contratanteNumero: '00000000000000',
        autorPedidoDadosNumero: '00000000000000',
        anoPA: '2022',
        isPessoaFisica: false,
      );
      print('‚úÖ DARF 13¬∫ Sal√°rio: ${darf13Response.sucesso}');
    } catch (e) {
      print('‚ùå Erro nos m√©todos de conveni√™ncia: $e');
    }
    await Future.delayed(Duration(seconds: 10));

    // 2. Exemplo com categoria espec√≠fica - Espet√°culo Desportivo
    try {
      print('\n--- 2. Exemplo Espet√°culo Desportivo ---');
      final espetaculoResponse = await dctfWebService.consultarXmlDeclaracao(
        contribuinteNumero: '00000000000',
        contratanteNumero: '00000000000',
        autorPedidoDadosNumero: '00000000000',
        categoria: CategoriaDctf.espetaculoDesportivo,
        anoPA: '2022',
        mesPA: '05',
        diaPA: '14', // Dia obrigat√≥rio para espet√°culo desportivo
      );
      print('‚úÖ XML Espet√°culo Desportivo: ${espetaculoResponse.sucesso}');
    } catch (e) {
      print('‚ùå Erro no exemplo espet√°culo desportivo: $e');
    }
    await Future.delayed(Duration(seconds: 10));

    // 3. Exemplo com categoria Aferi√ß√£o
    try {
      print('\n--- 3. Exemplo Aferi√ß√£o ---');
      final afericaoResponse = await dctfWebService.consultarXmlDeclaracao(
        contribuinteNumero: '00000000000',
        contratanteNumero: '00000000000',
        autorPedidoDadosNumero: '00000000000',
        categoria: CategoriaDctf.pfMensal,
        anoPA: '2022',
        mesPA: '06',
        //cnoAfericao: 28151, // CNO obrigat√≥rio para aferi√ß√£o
      );
      print('‚úÖ XML Aferi√ß√£o: ${afericaoResponse.sucesso}');
    } catch (e) {
      print('‚ùå Erro no exemplo aferi√ß√£o: $e');
    }
    await Future.delayed(Duration(seconds: 10));

    // 4. Exemplo com categoria Reclamat√≥ria Trabalhista
    try {
      print('\n--- 4. Exemplo Reclamat√≥ria Trabalhista ---');
      final reclamatoriaResponse = await dctfWebService.consultarReciboTransmissao(
        contribuinteNumero: '00000000000000',
        contratanteNumero: '00000000000000',
        autorPedidoDadosNumero: '00000000000000',
        categoria: CategoriaDctf.reclamatoriaTrabalhista,
        anoPA: '2022',
        mesPA: '12',
        numProcReclamatoria: '00365354520004013400', // Processo obrigat√≥rio
      );
      print('‚úÖ Recibo Reclamat√≥ria: ${reclamatoriaResponse.sucesso}');
    } catch (e) {
      print('‚ùå Erro no exemplo reclamat√≥ria trabalhista: $e');
    }
    await Future.delayed(Duration(seconds: 10));

    // 5. Exemplo de transmiss√£o completa (simulada)
    try {
      print('\n--- 5. Exemplo de fluxo completo (simulado) ---');
      print('‚ö†Ô∏è ATEN√á√ÉO: Este exemplo simula a assinatura digital.');
      print('‚ö†Ô∏è Em produ√ß√£o, voc√™ deve implementar a assinatura real com certificado digital.');

      final transmissaoResponse = await dctfWebService.consultarXmlETransmitir(
        contribuinteNumero: '00000000000',
        contratanteNumero: '00000000000', // CPF/CNPJ do contratante do servi√ßo
        autorPedidoDadosNumero: '00000000000', // CPF/CNPJ do autor do pedido de dados
        categoria: CategoriaDctf.pfMensal,
        anoPA: '2022',
        mesPA: '06',
        assinadorXml: (xmlBase64) async {
          // SIMULA√á√ÉO: Em produ√ß√£o, aqui voc√™ faria a assinatura digital real
          print('üîê Simulando assinatura digital do XML...');

          // Esta √© apenas uma simula√ß√£o - N√ÉO USE EM PRODU√á√ÉO
          // Voc√™ deve implementar a assinatura digital real com seu certificado
          return xmlBase64 + '_ASSINADO_SIMULADO';
        },
      );

      print('‚úÖ Transmiss√£o simulada: ${transmissaoResponse.status}');
      print('üìã Tem MAED: ${transmissaoResponse.temMaed}');

      if (transmissaoResponse.infoTransmissao != null) {
        final info = transmissaoResponse.infoTransmissao!;
        print('üìÑ N√∫mero do recibo: ${info.numeroRecibo}');
        print('üìÖ Data transmiss√£o: ${info.dataTransmissao}');
      }
    } catch (e) {
      print('‚ö†Ô∏è Erro na transmiss√£o simulada (esperado): $e');
    }

    print('\nüéâ Todos os servi√ßos DCTFWeb executados com sucesso!');
  } catch (e) {
    print('üí• Erro geral no servi√ßo DCTFWeb: $e');
  }
}
