import 'package:serpro_integra_contador_api/serpro_integra_contador_api.dart';
import 'package:serpro_integra_contador_api/src/models/pgdasd/entregar_declaracao_request.dart' as pgdasd_models;

Future<void> Pgdasd(ApiClient apiClient) async {
  print('=== Exemplos PGDASD ===');

  final pgdasdService = PgdasdService(apiClient);

  try {
    // 1. Entregar Declara√ß√£o Mensal (TRANSDECLARACAO11)
    try {
      print('\n--- 1. Entregando Declara√ß√£o Mensal ---');

      // Criar declara√ß√£o de exemplo com dados reais conforme documenta√ß√£o
      final declaracao = pgdasd_models.Declaracao(
        tipoDeclaracao: 1, // Original
        receitaPaCompetenciaInterno: 50000.00,
        receitaPaCompetenciaExterno: 10000.00,
        estabelecimentos: [
          pgdasd_models.Estabelecimento(
            cnpjCompleto: '00000000000100',
            atividades: [
              pgdasd_models.Atividade(
                idAtividade: 1,
                valorAtividade: 60000.00,
                receitasAtividade: [
                  pgdasd_models.ReceitaAtividade(
                    valor: 60000.00,
                    isencoes: [pgdasd_models.Isencao(codTributo: 1, valor: 1000.00, identificador: 1)],
                    reducoes: [pgdasd_models.Reducao(codTributo: 1, valor: 500.00, percentualReducao: 5.0, identificador: 1)],
                  ),
                ],
              ),
            ],
          ),
        ],
      );

      final entregarResponse = await pgdasdService.entregarDeclaracaoSimples(
        cnpj: '00000000000100',
        periodoApuracao: 202101,
        declaracao: declaracao,
        transmitir: true,
        compararValores: true,
        valoresParaComparacao: [
          pgdasd_models.ValorDevido(codigoTributo: 1, valor: 1000.00),
          pgdasd_models.ValorDevido(codigoTributo: 2, valor: 500.00),
        ],
      );

      print('‚úÖ Status: ${entregarResponse.status}');
      print('‚úÖ Sucesso: ${entregarResponse.sucesso}');

      if (entregarResponse.dadosParsed != null) {
        final declaracaoTransmitida = entregarResponse.dadosParsed!.first;
        print('üÜî ID Declara√ß√£o: ${declaracaoTransmitida.idDeclaracao}');
        print('üìÖ Data Transmiss√£o: ${declaracaoTransmitida.dataHoraTransmissao}');
        print('üí∞ Valor Total Devido: R\$ ${declaracaoTransmitida.valorTotalDevido}');
        print('üìã Tem MAED: ${declaracaoTransmitida.temMaed}');
      }
    } catch (e) {
      print('‚ùå Erro ao entregar declara√ß√£o mensal: $e');
    }

    // 2. Gerar DAS (GERARDAS12)
    try {
      print('\n--- 2. Gerando DAS ---');

      final gerarDasResponse = await pgdasdService.gerarDasSimples(
        cnpj: '00000000000100',
        periodoApuracao: '202101',
        dataConsolidacao: '20220831', // Data futura para consolida√ß√£o
      );

      print('‚úÖ Status: ${gerarDasResponse.status}');
      print('‚úÖ Sucesso: ${gerarDasResponse.sucesso}');

      if (gerarDasResponse.dadosParsed != null) {
        final das = gerarDasResponse.dadosParsed!.first;
        print('üè¢ CNPJ: ${das.cnpjCompleto}');
        print('üìÖ Per√≠odo: ${das.detalhamento.periodoApuracao}');
        print('üìÑ N√∫mero Documento: ${das.detalhamento.numeroDocumento}');
        print('üìÖ Data Vencimento: ${das.detalhamento.dataVencimento}');
        print('üí∞ Valor Total: R\$ ${das.detalhamento.valores.total}');
        print('üìÑ PDF dispon√≠vel: ${das.pdf.isNotEmpty}');
      }
    } catch (e) {
      print('‚ùå Erro ao gerar DAS: $e');
    }

    // 3. Consultar Declara√ß√µes por Ano-Calend√°rio (CONSDECLARACAO13)
    try {
      print('\n--- 3. Consultando Declara√ß√µes por Ano ---');

      final consultarAnoResponse = await pgdasdService.consultarDeclaracoesPorAno(cnpj: '00000000000000', anoCalendario: '2018');

      print('‚úÖ Status: ${consultarAnoResponse.status}');
      print('‚úÖ Sucesso: ${consultarAnoResponse.sucesso}');

      if (consultarAnoResponse.dadosParsed != null) {
        final declaracoes = consultarAnoResponse.dadosParsed!;
        print('üìÖ Ano Calend√°rio: ${declaracoes.anoCalendario}');
        print('üîç Per√≠odos encontrados: ${declaracoes.listaPeriodos.length}');

        for (final periodo in declaracoes.listaPeriodos.take(3)) {
          print('\nüìÖ Per√≠odo ${periodo.periodoApuracao}:');
          print('  üîß Opera√ß√µes: ${periodo.operacoes.length}');

          for (final operacao in periodo.operacoes.take(2)) {
            print('    ${operacao.tipoOperacao}');
            if (operacao.isDeclaracao) {
              print('      üìÑ N√∫mero: ${operacao.indiceDeclaracao!.numeroDeclaracao}');
              print('      üîç Malha: ${operacao.indiceDeclaracao!.malha ?? 'N√£o est√° em malha'}');
            }
            if (operacao.isDas) {
              print('      üí∞ DAS: ${operacao.indiceDas!.numeroDas}');
              print('      ‚úÖ Pago: ${operacao.indiceDas!.foiPago}');
            }
          }
        }
      }
    } catch (e) {
      print('‚ùå Erro ao consultar declara√ß√µes por ano: $e');
    }

    // 4. Consultar Declara√ß√µes por Per√≠odo (CONSDECLARACAO13)
    try {
      print('\n--- 4. Consultando Declara√ß√µes por Per√≠odo ---');

      final consultarPeriodoResponse = await pgdasdService.consultarDeclaracoesPorPeriodo(cnpj: '00000000000000', periodoApuracao: '201801');

      print('‚úÖ Status: ${consultarPeriodoResponse.status}');
      print('‚úÖ Sucesso: ${consultarPeriodoResponse.sucesso}');
    } catch (e) {
      print('‚ùå Erro ao consultar declara√ß√µes por per√≠odo: $e');
    }

    // 5. Consultar √öltima Declara√ß√£o (CONSULTIMADECREC14)
    try {
      print('\n--- 5. Consultando √öltima Declara√ß√£o ---');

      final ultimaDeclaracaoResponse = await pgdasdService.consultarUltimaDeclaracaoPorPeriodo(cnpj: '00000000000000', periodoApuracao: '201801');

      print('‚úÖ Status: ${ultimaDeclaracaoResponse.status}');
      print('‚úÖ Sucesso: ${ultimaDeclaracaoResponse.sucesso}');

      if (ultimaDeclaracaoResponse.dadosParsed != null) {
        final declaracao = ultimaDeclaracaoResponse.dadosParsed!;
        print('üìÑ N√∫mero Declara√ß√£o: ${declaracao.numeroDeclaracao}');
        print('üìÑ Recibo dispon√≠vel: ${declaracao.recibo.pdf.isNotEmpty}');
        print('üìÑ Declara√ß√£o dispon√≠vel: ${declaracao.declaracao.pdf.isNotEmpty}');
        print('üìã Tem MAED: ${declaracao.temMaed}');

        if (declaracao.temMaed) {
          print('  üìã Notifica√ß√£o MAED: ${declaracao.maed!.pdfNotificacao.isNotEmpty}');
          print('  üí∞ DARF MAED: ${declaracao.maed!.pdfDarf.isNotEmpty}');
        }
      }
    } catch (e) {
      print('‚ùå Erro ao consultar √∫ltima declara√ß√£o: $e');
    }

    // 6. Consultar Declara√ß√£o por N√∫mero (CONSDECREC15)
    try {
      print('\n--- 6. Consultando Declara√ß√£o por N√∫mero ---');

      final declaracaoNumeroResponse = await pgdasdService.consultarDeclaracaoPorNumeroSimples(
        cnpj: '00000000000000',
        numeroDeclaracao: '00000000201801001',
      );

      print('‚úÖ Status: ${declaracaoNumeroResponse.status}');
      print('‚úÖ Sucesso: ${declaracaoNumeroResponse.sucesso}');
    } catch (e) {
      print('‚ùå Erro ao consultar declara√ß√£o por n√∫mero: $e');
    }

    // 7. Consultar Extrato do DAS (CONSEXTRATO16)
    try {
      print('\n--- 7. Consultando Extrato do DAS ---');

      final extratoDasResponse = await pgdasdService.consultarExtratoDasSimples(cnpj: '00000000000000', numeroDas: '07202136999997159');

      print('‚úÖ Status: ${extratoDasResponse.status}');
      print('‚úÖ Sucesso: ${extratoDasResponse.sucesso}');

      if (extratoDasResponse.dadosParsed != null) {
        final extrato = extratoDasResponse.dadosParsed!;
        print('üí∞ N√∫mero DAS: ${extrato.numeroDas}');
        print('üè¢ CNPJ: ${extrato.cnpjCompleto}');
        print('üìÖ Per√≠odo: ${extrato.periodoApuracao}');
        print('üìÖ Data Vencimento: ${extrato.dataVencimento}');
        print('üí∞ Valor Total: R\$ ${extrato.valorTotal}');
        print('üìä Status Pagamento: ${extrato.statusPagamento}');
        print('‚úÖ Foi Pago: ${extrato.foiPago}');
        print('‚è∞ Est√° Vencido: ${extrato.estaVencido}');
        print('üìã Composi√ß√£o: ${extrato.composicao.length} tributos');

        for (final composicao in extrato.composicao.take(3)) {
          print('  ${composicao.nomeTributo}: R\$ ${composicao.valorTributo} (${composicao.percentual}%)');
        }
      }
    } catch (e) {
      print('‚ùå Erro ao consultar extrato do DAS: $e');
    }

    // 8. Exemplo com declara√ß√£o complexa (receitas brutas anteriores, folha de sal√°rio, etc.)
    try {
      print('\n--- 8. Exemplo com Declara√ß√£o Complexa ---');

      final declaracaoComplexa = pgdasd_models.Declaracao(
        tipoDeclaracao: 1, // Original
        receitaPaCompetenciaInterno: 100000.00,
        receitaPaCompetenciaExterno: 20000.00,
        receitasBrutasAnteriores: [
          pgdasd_models.ReceitaBrutaAnterior(pa: 202012, valorInterno: 80000.00, valorExterno: 15000.00),
          pgdasd_models.ReceitaBrutaAnterior(pa: 202011, valorInterno: 75000.00, valorExterno: 12000.00),
        ],
        folhasSalario: [pgdasd_models.FolhaSalario(pa: 202012, valor: 5000.00), pgdasd_models.FolhaSalario(pa: 202011, valor: 4800.00)],
        estabelecimentos: [
          pgdasd_models.Estabelecimento(
            cnpjCompleto: '00000000000100',
            atividades: [
              pgdasd_models.Atividade(
                idAtividade: 1,
                valorAtividade: 120000.00,
                receitasAtividade: [
                  pgdasd_models.ReceitaAtividade(
                    valor: 120000.00,
                    qualificacoesTributarias: [
                      pgdasd_models.QualificacaoTributaria(codigoTributo: 1, id: 1),
                      pgdasd_models.QualificacaoTributaria(codigoTributo: 2, id: 2),
                    ],
                    exigibilidadesSuspensas: [
                      pgdasd_models.ExigibilidadeSuspensa(
                        codTributo: 1,
                        numeroProcesso: 123456789,
                        uf: 'SP',
                        vara: '1¬™ Vara Federal',
                        existeDeposito: true,
                        motivo: 1,
                      ),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
      );

      print('‚úÖ Declara√ß√£o complexa criada com:');
      print('üìÖ - Receitas brutas anteriores: ${declaracaoComplexa.receitasBrutasAnteriores!.length} per√≠odos');
      print('üí∞ - Folhas de sal√°rio: ${declaracaoComplexa.folhasSalario!.length} per√≠odos');
      print('üè¢ - Estabelecimentos: ${declaracaoComplexa.estabelecimentos.length}');
      print('üíº - Atividades: ${declaracaoComplexa.estabelecimentos.first.atividades!.length}');
      print(
        'üè∑Ô∏è - Qualifica√ß√µes tribut√°rias: ${declaracaoComplexa.estabelecimentos.first.atividades!.first.receitasAtividade.first.qualificacoesTributarias!.length}',
      );
      print(
        '‚öñÔ∏è - Exigibilidades suspensas: ${declaracaoComplexa.estabelecimentos.first.atividades!.first.receitasAtividade.first.exigibilidadesSuspensas!.length}',
      );
    } catch (e) {
      print('‚ùå Erro ao criar declara√ß√£o complexa: $e');
    }

    // 9. Exemplo de valida√ß√£o de dados
    try {
      print('\n--- 9. Exemplo de Valida√ß√£o de Dados ---');

      // CNPJ inv√°lido
      try {
        final requestInvalido = pgdasd_models.EntregarDeclaracaoRequest(
          cnpjCompleto: '123', // CNPJ inv√°lido
          pa: 202101,
          indicadorTransmissao: true,
          indicadorComparacao: false,
          declaracao: pgdasd_models.Declaracao(
            tipoDeclaracao: 1,
            receitaPaCompetenciaInterno: 50000.00,
            receitaPaCompetenciaExterno: 10000.00,
            estabelecimentos: [],
          ),
        );
        print('‚ùå CNPJ inv√°lido detectado: ${!requestInvalido.isCnpjValido}');
      } catch (e) {
        print('‚ö†Ô∏è Erro esperado na valida√ß√£o: $e');
      }

      // Per√≠odo inv√°lido
      try {
        final requestInvalido = pgdasd_models.EntregarDeclaracaoRequest(
          cnpjCompleto: '00000000000100',
          pa: 201701, // Per√≠odo anterior a 2018
          indicadorTransmissao: true,
          indicadorComparacao: false,
          declaracao: pgdasd_models.Declaracao(
            tipoDeclaracao: 1,
            receitaPaCompetenciaInterno: 50000.00,
            receitaPaCompetenciaExterno: 10000.00,
            estabelecimentos: [],
          ),
        );
        print('‚ùå Per√≠odo inv√°lido detectado: ${!requestInvalido.isPaValido}');
      } catch (e) {
        print('‚ö†Ô∏è Erro esperado na valida√ß√£o: $e');
      }
    } catch (e) {
      print('‚ùå Erro na valida√ß√£o de dados: $e');
    }

    print('\nüéâ Todos os servi√ßos PGDASD executados com sucesso!');
  } catch (e) {
    print('üí• Erro geral no servi√ßo PGDASD: $e');
  }
}
