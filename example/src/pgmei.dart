import 'package:serpro_integra_contador_api/serpro_integra_contador_api.dart';

Future<void> Pgmei(ApiClient apiClient) async {
  print('=== TESTANDO TODOS OS SERVI√áOS PGMEI ===\n');

  final pgmeiService = PgmeiService(apiClient);
  int sucessos = 0;
  int erros = 0;

  // CNPJs de teste da documenta√ß√£o
  const cnpjContribuinte1 = '00000000000100';
  const cnpjContribuinte2 = '00000000000101';

  // ========================================
  // 1. GERARDASPDF21 - Gerar DAS com PDF
  // ========================================
  try {
    print('üìã 1. GERARDASPDF21 - Gerar DAS com PDF');
    print('   CNPJ: $cnpjContribuinte1');
    print('   Per√≠odo: 201901');

    final response = await pgmeiService.gerarDas(cnpj: cnpjContribuinte1, periodoApuracao: '201901');

    if (response.sucesso) {
      print('   ‚úÖ Successo: ${response.mensagens.first.texto}');

      final dasGerados = response.dasGerados;
      if (dasGerados != null && dasGerados.isNotEmpty) {
        final das = dasGerados.first;
        final detalhe = das.primeiroDetalhamento;

        if (detalhe != null) {
          print('   üìÑ PDF gerado: ${das.pdf.length} caracteres');
          print('   üí∞ Valor total: R\$ ${detalhe.valores.total.toStringAsFixed(2)}');
          print('   üìÖ Vencimento: ${formatarData(detalhe.dataVencimento)}');

          // Salvar PDF em arquivo
          final sucessoSalvamento = await PdfFileUtils.salvarPdf(das.pdf, 'das_pgmei_${DateTime.now().millisecondsSinceEpoch}.pdf');
          print('   PDF salvo em arquivo: ${sucessoSalvamento ? 'Sim' : 'N√£o'}');

          if (detalhe.composicao != null) {
            print('   üìä Tributos:');
            for (final comp in detalhe.composicao!) {
              print('      ${comp.codigo}: ${comp.denominacao}');
              print('        Valor: R\$ ${comp.valores.total.toStringAsFixed(2)}');
            }
          }
        }
      }
      sucessos++;
    } else {
      print('   ‚ùå Erro: ${response.mensagens.map((m) => m.texto).join(', ')}');
      erros++;
    }
  } catch (e) {
    print('   ‚ùå Exce√ß√£o: $e');
    erros++;
  }

  await Future.delayed(const Duration(seconds: 3));

  // ===================================================
  // 2. GERARDASCODBARRA22 - Gerar DAS c√≥digo barras
  // ===================================================
  try {
    print('\nüìã 2. GERARDASCODBARRA22 - Gerar DAS c√≥digo barras');
    print('   CNPJ: $cnpjContribuinte1');
    print('   Per√≠odo: 201901');

    final response = await pgmeiService.gerarDasCodigoBarras(cnpj: cnpjContribuinte1, periodoApuracao: '201901');

    if (response.sucesso) {
      print('   ‚úÖ Successo: ${response.mensagens.first.texto}');

      final dasGerados = response.dasGerados;
      if (dasGerados != null && dasGerados.isNotEmpty) {
        final das = dasGerados.first;
        final detalhe = das.primeiroDetalhamento;

        if (detalhe != null) {
          print('   üî≤ C√≥digos de barras: ${detalhe.codigoDeBarras.length} segmentos');
          print('   üí∞ Valor total: R\$ ${detalhe.valores.total.toStringAsFixed(2)}');
          print('   üìÖ Vencimento: ${formatarData(detalhe.dataVencimento)}');

          if (detalhe.codigoDeBarras.isNotEmpty) {
            print('   üìä C√≥digo de barras: ${detalhe.codigoDeBarras.join(' ')}');
          }
        }
      }
      sucessos++;
    } else {
      print('   ‚ùå Erro: ${response.mensagens.map((m) => m.texto).join(', ')}');
      erros++;
    }
  } catch (e) {
    print('   ‚ùå Exce√ß√£o: $e');
    erros++;
  }

  await Future.delayed(const Duration(seconds: 3));

  // ========================================
  // 3. ATUBENEFICIO23 - Atualizar Benef√≠cio
  // ========================================
  try {
    print('\nüìã 3. ATUBENEFICIO23 - Atualizar Benef√≠cio');
    print('   CNPJ: $cnpjContribuinte1');
    print('   Ano: 2021');
    print('   Per√≠odos: 202101, 202102');

    final beneficios = [
      InfoBeneficio(periodoApuracao: '202101', indicadorBeneficio: true),
      InfoBeneficio(periodoApuracao: '202102', indicadorBeneficio: true),
    ];

    final response = await pgmeiService.atualizarBeneficio(cnpj: cnpjContribuinte1, anoCalendario: 2021, beneficios: beneficios);

    if (response.sucesso) {
      print('   ‚úÖ Successo: ${response.mensagens.first.texto}');

      final beneficiosAtualizados = response.beneficiosAtualizados;
      if (beneficiosAtualizados != null && beneficiosAtualizados.isNotEmpty) {
        print('   üìã Benef√≠cios atualizados:');
        for (final beneficio in beneficiosAtualizados) {
          print('      PA Original: ${beneficio.paOriginal}');
          print('      Indicador: ${beneficio.indicadorBeneficio ? 'Sim' : 'N√£o'}');
          print('      PA Agrupado: ${beneficio.paAgrupado}');
          print('      ---');
        }
      }
      sucessos++;
    } else {
      print('   ‚ùå Erro: ${response.mensagens.map((m) => m.texto).join(', ')}');
      erros++;
    }
  } catch (e) {
    print('   ‚ùå Exce√ß√£o: $e');
    erros++;
  }

  await Future.delayed(const Duration(seconds: 3));

  // ============================================
  // 4. DIVIDAATIVA24 - Consultar D√≠vida Ativa
  // ============================================
  try {
    print('\nüìã 4. DIVIDAATIVA24 - Consultar D√≠vida Ativa');
    print('   CNPJ: $cnpjContribuinte2');
    print('   Ano: 2020');

    final response = await pgmeiService.consultarDividaAtiva(cnpj: cnpjContribuinte1, anoCalendario: '2020');

    if (response.sucesso) {
      print('   ‚úÖ Successo: ${response.mensagens.first.texto}');

      final debitosDividaAtiva = response.debitosDividaAtiva;
      if (response.temDebitosDividaAtiva) {
        print('   üö® Situa√ß√£o: CONTRIBUINTE EM D√çVIDA ATIVA');
        print('   üí∞ Valor total em d√≠vida: R\$ ${response.valorTotalDividaAtiva.toStringAsFixed(2)}');
        print('   üìã D√©bitos encontrados:');

        for (final debito in debitosDividaAtiva!) {
          print('      Per√≠odo: ${debito.periodoApuracao}');
          print('      Tributo: ${debito.tributo}');
          print('      Valor: R\$ ${debito.valor.toStringAsFixed(2)}');
          print('      Ente: ${debito.enteFederado}');
          print('      Situa√ß√£o: ${debito.situacaoDebito}');
          print('      ---');
        }
      } else {
        print('   ‚úÖ Situa√ß√£o: Contribuinte SEM d√≠vida ativa');
      }
      sucessos++;
    } else {
      print('   ‚ùå Erro: ${response.mensagens.map((m) => m.texto).join(', ')}');
      erros++;
    }
  } catch (e) {
    print('   ‚ùå Exce√ß√£o: $e');
    erros++;
  }

  await Future.delayed(const Duration(seconds: 3));

  // ============================================
  // TESTES ADICIONAIS COM M√âTODOS DE CONVENI√äNCIA
  // ============================================

  print('\nüìã TESTANDO M√âTODOS DE CONVENI√äNCIA');

  // Teste da interface moderna (sem deprecated)
  try {
    print('\nüìã 5. Interface Moderna - Gerar DAS c√≥digo barras');
    print('   CNPJ: $cnpjContribuinte1');
    print('   Per√≠odo: 202310');

    final response = await pgmeiService.gerarDasCodigoBarras(cnpj: cnpjContribuinte1, periodoApuracao: '202310');

    if (response.sucesso) {
      print('   ‚úÖ Interface moderna funcionando: ${response.mensagens.first.texto}');
      sucessos++;
    } else {
      print('   ‚ùå Interface moderna falhou: ${response.mensagens.map((m) => m.texto).join(', ')}');
      erros++;
    }
  } catch (e) {
    print('   ‚ùå Exce√ß√£o na interface moderna: $e');
    erros++;
  }

  await Future.delayed(const Duration(seconds: 3));

  // Teste do m√©todo simplificado para benef√≠cio √∫nico
  try {
    print('\nüìã 6. Benef√≠cio Per√≠odo √önico');
    print('   CNPJ: $cnpjContribuinte1');
    print('   Ano: 2021, Per√≠odo: 202101');

    final response = await pgmeiService.atualizarBeneficioPeriodoUnico(
      cnpj: cnpjContribuinte1,
      anoCalendario: 2021,
      periodoApuracao: '202101',
      indicadorBeneficio: true,
    );

    if (response.sucesso) {
      print('   ‚úÖ Benef√≠cio √∫nico atualizado: ${response.mensagens.first.texto}');
      sucessos++;
    } else {
      print('   ‚ùå Benef√≠cio √∫nico falhou: ${response.mensagens.map((m) => m.texto).join(', ')}');
      erros++;
    }
  } catch (e) {
    print('   ‚ùå Exce√ß√£o no benef√≠cio √∫nico: $e');
    erros++;
  }

  // ============================================
  // RESUMO FINAL DOS TESTES
  // ============================================

  print('\n' + '=' * 50);
  print('üìä RESUMO DOS TESTES PGMEI');
  print('=' * 50);
  print('‚úÖ Sucessos: $sucessos');
  print('‚ùå Erros: $erros');
  print('üìà Taxa de sucesso: ${((sucessos / (sucessos + erros)) * 100).toStringAsFixed(1)}%');

  if (erros == 0) {
    print('üéâ TODOS OS SERVI√áOS PGMEI FUNCIONANDO PERFEITAMENTE!');
  } else if (sucessos > erros) {
    print('‚ö†Ô∏è  Maioria dos servi√ßos funcionando, alguns erros detectados');
  } else {
    print('üö® Muitos erros detectados, verificar configura√ß√£o da API');
  }

  print('\nServi√ßos testados:');
  print('   ‚Ä¢ GERARDASPDF21 - Gerar DAS com PDF');
  print('   ‚Ä¢ GERARDASCODBARRA22 - Gerar DAS c√≥digo barras');
  print('   ‚Ä¢ ATUBENEFICIO23 - Atualizar Benef√≠cio');
  print('   ‚Ä¢ DIVIDAATIVA24 - Consultar D√≠vida Ativa');
  print('   ‚Ä¢ M√©todos de conveni√™ncia');

  print('\nüèÅ Testes PGMEI conclu√≠dos!');
}

/// Formata data no formato AAAAMMDD para DD/MM/YYYY
String formatarData(String dataAaaammdd) {
  if (dataAaaammdd.length != 8) return dataAaaammdd;

  final ano = dataAaaammdd.substring(0, 4);
  final mes = dataAaaammdd.substring(4, 6);
  final dia = dataAaaammdd.substring(6, 8);

  return '$dia/$mes/$ano';
}
